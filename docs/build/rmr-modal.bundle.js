/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/rmr-util/index.js":
/*!****************************************!*\
  !*** ./node_modules/rmr-util/index.js ***!
  \****************************************/
/***/ ((module) => {

eval("/* global */\n\n(() => {\n\n  'use strict';\n\n  const\n  breakpoints = [\n    {\n      name: 'xs',\n      value: 0\n    },\n    {\n      name: 'sm',\n      value: 576\n    },\n    {\n      name: 'md',\n      value: 768\n    },\n    {\n      name: 'lg',\n      value: 992\n    },\n    {\n      name: 'xl',\n      value: 1200\n    },\n    {\n      name: 'xxl',\n      value: 2000\n    }\n\n  ],\n  easeInOutQuad = function(t) { return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t };\n\n  /**\n   * rmr-util\n   *\n   * JS for your browser\n   *\n   *\n   *\n   */\n\n\n  const\n\n  /**\n   *\n   *\n   */\n   Base64 = {\n    _keyStr: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n    encode: function(e) {\n      let t=\"\";\n      let n,r,i,s,o,u,a;\n      let f=0;\n      e = Base64._utf8_encode(e);\n      while (f <e.length) {\n        n = e.charCodeAt(f++);\n        r = e.charCodeAt(f++);\n        i = e.charCodeAt(f++);\n        s = n >> 2;\n        o = (n&3)<<4|r>>4;\n        u=(r&15)<<2|i>>6;\n        a = i & 63;\n        if (isNaN(r)) {\n          u = a = 64;\n        } else if (isNaN(i)) {\n          a =64;\n        }\n        t = t + this._keyStr.charAt(s) + this._keyStr.charAt(o) + this._keyStr.charAt(u) + this._keyStr.charAt(a);\n      }\n      return t;\n    },\n\n    decode: function(e) {\n\n      let t = \"\";\n      let n,r,i, s,o,u,a;\n      let f = 0;\n\n      e = e.replace(/[^A-Za-z0-9\\+\\/\\=]/g,\"\");\n\n      while (f < e.length) {\n        s = this._keyStr.indexOf(e.charAt(f++));\n        o = this._keyStr.indexOf(e.charAt(f++));\n        u = this._keyStr.indexOf(e.charAt(f++));\n        a = this._keyStr.indexOf(e.charAt(f++));\n        n = s << 2 | o>>4;\n        r = (o & 15) << 4 | u >> 2;\n        i = (u & 3) << 6 | a;\n        t = t + String.fromCharCode(n);\n        if (u !== 64) {\n          t = t+String.fromCharCode(r);\n        }\n        if (a !== 64) {\n          t = t+String.fromCharCode(i);\n        }\n      }\n      t = Base64._utf8_decode(t);\n      return t;\n    },\n    _utf8_encode: function(e) {\n      e = e.replace(/\\r\\n/g,\"\\n\");\n      let t=\"\",\n      n = 0;\n      for (n = 0; n < e.length;n++) {\n        const r = e.charCodeAt(n);\n        if (r < 128) {\n          t += String.fromCharCode(r);\n        } else if (r > 127 && r < 2048) {\n          t += String.fromCharCode(r>>6|192);\n          t += String.fromCharCode(r&63|128);\n        } else {\n          t += String.fromCharCode(r>>12|224);\n          t += String.fromCharCode(r>>6&63|128);\n          t += String.fromCharCode(r&63|128);\n        }\n      }\n      return t;\n    },\n\n    _utf8_decode: function(e) {\n      let\n      t = \"\",\n      n = 0,\n      r = 0,\n      c2 = 0,\n      c3 = 0;\n\n      while (n < e.length) {\n        r = e.charCodeAt(n);\n        if (r<128) {\n          t += String.fromCharCode(r);\n          n++;\n        } else if (r > 191 && r < 224) {\n          c2 = e.charCodeAt(n+1);\n          t += String.fromCharCode((r&31)<<6|c2&63);\n          n += 2;\n        } else {\n          c2 = e.charCodeAt(n+1);\n          c3 = e.charCodeAt(n+2);\n          t += String.fromCharCode((r&15)<<12|(c2&63)<<6|c3&63);\n          n += 3;\n        }\n      }\n      return t;\n    }\n  },\n\n  /**\n   * Retrieve an element via query selector, or\n   *\n   * @param {Mixed} arg the element to retrieve, or null if no such element exists\n   * @param {Mixed, optional} the root node from which the query selector should select;\n   * @return {Element} element corresponding to the selector, or `null` if no such element exists\n   */\n  getElement = function(arg, parent) {\n    if (typeof arg === 'string') {\n\n      const root = (parent ? getElement(parent) : document);\n      if (! root) {\n        console.error('Invalid root for selector `' + arg + '`', parent);\n        return null;\n      }\n\n      return root.querySelector(arg);\n    } else if (arg instanceof Element) {\n      return arg;\n    }\n\n    return null;\n  },\n\n  /**\n   * Determine if a variable/object is an HTML element\n   *\n   * @param {Mixed}\n   * @return {Bool}\n   */\n  isAnElement = function(arg) {\n    return arg instanceof Element;\n  },\n\n  /**\n   * Determine if a string is a valid internet URL\n   *\n   * @param {String} str - the string to be tested\n   * @return {Bool} - `true` of `false`\n   */\n  isURL = function(str) {\n    return /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i.test(str);\n  },\n\n  /**\n   * Determine if a string is a valid email\n   *\n   * @param {String} str - the string to be tested\n   * @return {Bool} - `true` of `false`\n   */\n  isEmail = function(str) {\n\n    const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(str).toLowerCase());\n  },\n\n\n  /**\n    Format a latitude coordinate value into a human-friendly string\n\n    @param {Float} lat  value to be formatted\n    @return {String} formatted latitude string\n   */\n  formatLatitude = function(lat) {\n\n    let\n    value = parseFloat(lat),\n    degrees = 0,\n    minutes = 0,\n    seconds = 0;\n\n    const dir = value <  0 ? 'S' : 'N';\n\n    degrees = parseInt(value);\n    value = (value - degrees) * 60;\n\n    minutes = parseInt(value);\n    seconds = (value - minutes) * 60;\n\n    if (seconds < 0) {\n      seconds *= -1;\n    }\n\n    return Math.abs(degrees) + 'º' + Math.abs(minutes) + '’' + seconds.toFixed(2) + '”' + dir;\n  },\n\n  /**\n    Format a longitude coordinate value into a human-friendly string\n\n    @param {Float} lon  value to be formatted\n    @return {String} formatted longitude string\n   */\n  formatLongitude = function(lon) {\n\n    let\n    value = parseFloat(lon),\n    degrees = 0,\n    minutes = 0,\n    seconds = 0;\n\n    const dir = value <  0 ? 'W' : 'E';\n\n    degrees = parseInt(value);\n    value = (value - degrees) * 60;\n\n    minutes = parseInt(value);\n    seconds = (value - minutes) * 60;\n\n    return Math.abs(degrees) + 'º' + Math.abs(minutes) + '’' + Math.abs(seconds.toFixed(2)) + '”' + dir;\n  },\n\n\n  /**\n   * Determine if a node matches a provided selector\n   *\n   * @param {HTMLElement} node  the element to be tested\n   * @param {String} selector the selector string to test\n   * @return {Bool} `true` or `false`\n   */\n  selectorMatches = function (node, selector) {\n\n    const\n    p = Element.prototype,\n    f = p.matches || p.webkitMatchesSelector || p.mozMatchesSelector || p.msMatchesSelector || function matches() {\n      return [].indexOf.call(document.querySelectorAll(selector), this) !== -1;\n    };\n    try {\n      return f.call(node, selector);\n    } catch (e) {\n      return false;\n    }\n  },\n\n  /**\n   * Determine if we're in a touch-based browser (phone/tablet)\n   *\n   * @return {Bool} `true` or `false`\n   */\n  isTouch = function() {\n\n    if (typeof window === 'undefined' || typeof navigator === 'undefined') {\n      return false;\n    }\n    return typeof window.orientation !== 'undefined';\n  },\n\n  /**\n   * Determine if we're in Safari\n   *\n   * @return {Bool} `true` or `false`\n   */\n  isSafari = function() {\n\n    if (typeof window === 'undefined' || typeof navigator === 'undefined') {\n      return false;\n    }\n    return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n  },\n\n  /**\n   * Determine if we're in Firefox\n   *\n   * @return {Bool} `true` or `false`\n   */\n  isFirefox = function() {\n\n    if (typeof window === 'undefined' || typeof navigator === 'undefined') {\n      return false;\n    }\n    return navigator.userAgent.indexOf(\"Firefox\") > 0;\n  },\n\n  /**\n   * Is the browser capable of opening new windows/tabs with \"data:\" protocol\n   *\n   * @see https://groups.google.com/a/chromium.org/forum/#!topic/blink-dev/GbVcuwg_QjM%5B1-25%5D\n   * @return {Bool} `true` if the browser opens `data:` URLs; `false` if not\n   */\n  opensData = function() {\n    return isFirefox() || isSafari();\n  },\n\n  /**\n   * Retrieve an object containing browser/screen coordinates for a DOM element\n   *\n   * @param {Element} node the element whose coordinates should be retrieved\n   * @return {Object} An object containing { top : xx, left : xx, bottom: xx, right: xx, width: xx, height: xx }\n   */\n  getRect = function(node) {\n\n    node = getElement(node);\n    if (!node) {\n      return { top: 0, left: 0, right: 0, width: 0, height: 0 };\n    }\n\n    const\n    rect = node.getBoundingClientRect(),\n    ret = { top: rect.top, left: rect.left, bottom: rect.bottom, right: rect.right }; // create a new object that is not read-only\n\n    ret.top += window.pageYOffset;\n    ret.left += window.pageXOffset;\n\n    ret.bottom += window.pageYOffset;\n    ret.right += window.pageYOffset;\n\n    ret.width = rect.right - rect.left;\n    ret.height = rect.bottom - rect.top;\n\n    return ret;\n  },\n\n  /**\n   * Scroll to an element\n   *\n   * @param {Mixed} y - vertical offset to scroll to, or selector/node references for the Element to scroll to\n   * @param {Integer} duration - # of milliseconds animation should run\n   */\n  scrollTo = function(y, duration) {\n\n    if (arguments.length === 1) {\n      duration = 200;\n    }\n\n    if (typeof y === 'string' || y instanceof Element) {\n      y = getRect(y).top;\n    }\n\n    const\n    timing = easeInOutQuad,\n    startingY = window.pageYOffset,\n    diff = y - startingY;\n\n    let start = performance.now();\n\n    // Bootstrap our animation - it will get called right before next frame shall be rendered.\n    window.requestAnimationFrame(function step(timestamp) {\n\n      const\n      time = timestamp - start,\n      percent = Math.min(time / duration, 1);\n\n      window.scrollTo(0, startingY + diff * timing(percent));\n\n      // Proceed with animation as long as we wanted it to.\n      if (time < duration) {\n        window.requestAnimationFrame(step);\n      }\n    });\n  },\n\n  scrollNodeTo = function(element, to, duration, onDone) {\n\n    element = getElement(element);\n    const node = getElement(to, element);\n    if (node) {\n      to = relativePosition(node).top;\n    }\n    else {\n      to = parseInt(to, 10);\n    }\n\n    if (! duration) {\n      duration = 200;\n    }\n\n    let\n    start = element.scrollTop,\n    change = to - start,\n    startTime = performance.now(),\n    now, elapsed, t;\n\n    function animateScroll() {\n      now = performance.now();\n      elapsed = now - startTime;\n      t = (elapsed / duration);\n\n      element.scrollTop = start + change * easeInOutQuad(t);\n      if (t < 1) {\n        window.requestAnimationFrame(animateScroll);\n      }\n      else {\n        element.scrollTop = to;\n        onDone && onDone();\n      }\n    }\n\n    animateScroll();\n  },\n\n  /**\n   *\n   *\n   */\n  relativePosition = function(node) {\n\n    node = getElement(node);\n\n    const\n    pPos = node.parentNode.getBoundingClientRect(), // parent pos\n    cPos = node.getBoundingClientRect(), // target pos\n    pos = {};\n\n    pos.top = cPos.top - pPos.top + node.parentNode.scrollTop,\n    pos.right = cPos.right - pPos.right,\n    pos.bottom = cPos.bottom - pPos.bottom,\n    pos.left = cPos.left - pPos.left;\n\n    return pos;\n  },\n\n  /*\n   * Generate a unique string suitable for id attributes\n   *\n   * @param basename (String)\n   * @return string\n   */\n  guid = function(basename) {\n    return (basename ? basename : 'rmr-guid-') + parseInt(Math.random() * 100, 10) + '-' + parseInt(Math.random() * 1000, 10);\n  },\n\n  /*\n   * Merge two objects into one, values in b take precedence over values in a\n   *\n   * @param a {Object}\n   * @param b {Object}\n\n   * @return Object\n   */\n  objectMerge = function(a, b) {\n    const o = {};\n    let i = null;\n    for (i in a) {\n      if (objectHas(a, i)) {\n        o[i] = a[i];\n      }\n    }\n    if (! b) {\n      return o;\n    }\n    for (i in b) {\n      if (objectHas(b, i)) {\n        o[i] = b[i];\n      }\n    }\n    return o;\n  },\n\n  /**\n   * Convert an array-like thing (ex: NodeList or arguments object) into a proper array, or convert a scalar into a single-element array\n   *\n   * @param {Mixed} list an array-like thing or a scalar\n   * @return {Array} the param as an array\n   */\n  arr = function(list) {\n\n    const ret = [];\n    let i = 0;\n\n    if (list instanceof Array) {\n      return list;\n    }\n\n    if (typeof list.length !== 'number') {\n      return [list];\n    }\n\n    for (i = 0; i < list.length; i++) {\n      if (objectHas(list, i)) {\n        ret.push(list[i]);\n      }\n    }\n\n    return ret;\n  },\n\n\n  /**\n   * Remove an object from an array\n   *\n   * @param {Array} array containing object to be removed\n   * @param {Any} item to be removed\n   * @return {Array} array for chaining\n   */\n  arrayRemove = function(array, item) {\n    return arr(array).filter(e => e !== item);\n  },\n\n  /**\n   * Return the index of an item in an array\n   *\n   * @param {Array} list that should be searched\n   * @param {Function} func comparator function that takes on argument\n   * @return {Integer} index of the item in the array, or -1 if it doesn't exist\n   */\n  arrayFind = function(list, func) {\n\n    const array = arr(list);\n\n    if (typeof func !== 'function') {\n\n      const\n      target = func,\n      lookup = function(param) {\n\n        if (typeof param === 'object' && objectHas(param, 'id')) {\n          if (typeof target === 'object' && objectHas(target, 'id')) {\n            return param.id === target.id;\n          }\n          return param.id === target;\n        }\n\n        return param === target;\n       };\n      func = lookup;\n    }\n    for (const i in array) {\n      if (! objectHas(array, i)) {\n        continue;\n      }\n\n      if (array[i] === func || func(array[i])) {\n        return parseInt(i, 10);\n      }\n    }\n    return -1;\n  },\n\n  /**\n   * Shift the objects within an array so that a given item is first\n   *\n   * @param {Array} array containing object to be removed\n   * @param {Any} item to be made the first\n   * @return {Array} array for chaining\n   */\n  arrayReorder = function(array, item) {\n\n    const\n      list = arr(array),\n      reordered = [];\n\n    const index = arrayFind(list, item);\n    if (index === -1) {\n      return list;\n    }\n\n    reordered.push(list[index]);\n\n    for (let i = index + 1; i < list.length; i++) {\n      reordered.push(array[i]);\n    }\n\n    for (let i = 0; i < index; i++) {\n      reordered.push(array[i]);\n    }\n\n    return reordered;\n  },\n\n\n  /**\n   * Remove all children from a node (optionally matching a selector)\n   *\n   * @param {Mixed} arg - node or selector whose children should be removed\n   * @param {String,optional} selector - query selector that children must match in order to be removed\n   * @return {HTMLElement} - for chaining\n   */\n  pruneElement = function(arg, selector) {\n\n    const node = getElement(arg);\n    if (! node) {\n      return null;\n    }\n    if (selector) {\n      let n = arr(arg.querySelectorAll(selector));\n      for (let i = 0; i < n.length; i++) {\n        removeNode(n[i]);\n      }\n    }\n    else {\n      while (node.firstChild) {\n        node.removeChild(node.firstChild);\n      }\n    }\n\n    return node;\n  },\n\n\n  /**\n   * Retrieve an element via query selector\n   *\n   * @param {Mixed} arg selector, or an array of elements to attach\n   * @param {Mixed,optional} scope the parent node\n   * @return {[Element]} array of elements\n   */\n  getElements = function(arg, scope) {\n\n    if (! scope) {\n      scope = document;\n    }\n    else {\n      scope = getElement(scope);\n    }\n\n    if (typeof arg === 'string') {\n      return arr(scope.querySelectorAll(arg));\n    }\n\n    return arr(arg);\n  },\n\n  /*\n   * Create an element with a set of attributes/values\n   *\n   * @param type (String)\n   * @param attrs {Object}\n   *\n   * @return HTMLElement\n   */\n  makeElement = function(type, attrs) {\n\n     const n = document.createElement(type);\n\n     for (const i in attrs) {\n       if (objectHas(attrs, i) && attrs[i]) {\n         n.setAttribute(i, attrs[i]);\n       }\n     }\n     return n;\n  },\n\n  /**\n   *\n   * Make loader\n   *\n   * @return {String} SVG element\n   */\n  loader = function() {\n\n    return '<svg version=\"1.1\" class=\"rmr-loader\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"40px\" height=\"40px\" viewBox=\"0 0 40 40\" enable-background=\"new 0 0 40 40\" xml:space=\"preserve\">' +\n    '<path opacity=\"0.2\" fill=\"#000\" d=\"M20.201,5.169c-8.254,0-14.946,6.692-14.946,14.946c0,8.255,6.692,14.946,14.946,14.946 s14.946-6.691,14.946-14.946C35.146,11.861,28.455,5.169,20.201,5.169z M20.201,31.749c-6.425,0-11.634-5.208-11.634-11.634 c0-6.425,5.209-11.634,11.634-11.634c6.425,0,11.633,5.209,11.633,11.634C31.834,26.541,26.626,31.749,20.201,31.749z\"></path>' +\n    '<path fill=\"#000\" d=\"M26.013,10.047l1.654-2.866c-2.198-1.272-4.743-2.012-7.466-2.012h0v3.312h0 C22.32,8.481,24.301,9.057,26.013,10.047z\">' +\n    '<animateTransform attributeType=\"xml\" attributeName=\"transform\" type=\"rotate\" from=\"0 20 20\" to=\"360 20 20\" dur=\"0.8s\" repeatCount=\"indefinite\"></animateTransform>' +\n    '</path>' +\n    '</svg>';\n  },\n\n\n//   *\n//    * Bind variables to placeholders in a string\n//    *\n//    * @param {String} subject\n//    * @param {Object} lookup table containing key/value pairs\n//    * @return {String} string\n//    */\n//   bindString = function(subject, lookup) {\n//\n//     let str = subject;\n//\n//     for (const key in lookup) {\n//       if (! objectHas(lookup, key)) {\n//         continue;\n//       }\n//       str = str.replace(key, lookup[key])\n//     }\n//\n//     return str;\n//   },\n\n  /**\n   * Localize a string\n   *\n   * {\n   *   'en' : {\n   *      'key' : 'neighbor'\n   *    },\n   *    'en-ca' : {\n   *      'key' : 'neighbour'\n   *    }\n   *  }\n   *\n   * @param {Object} lookup dictionary\n   * @param {String} key the to localize\n   * @return {String} string\n   */\n  localize = function(lookup, key) {\n\n    if (typeof navigator === 'undefined') {\n      return key;\n    }\n\n    let i, lang;\n\n    for (i in navigator.languages) {\n      if (! objectHas(navigator.languages, i)) {\n        continue;\n      }\n      lang = navigator.languages[i].toLowerCase();\n      if (objectHas(lookup, lang) && objectHas(lookup[lang], key)) {\n        return lookup[lang][key];\n      }\n    }\n    console.warn('No localization for ' + key);\n    return key;\n  },\n\n  /**\n   * Apply styles to a node\n   *\n   * @param {HTMLElement} node that should have styles applied\n   * @param {Object} styles key/value pairs for styles and values\n   * @return {Element} node\n   */\n  setStyles = function(node, styles) {\n\n    node = getElement(node);\n    if (! node) {\n      return false;\n    }\n\n    for (const i in styles) {\n      if (objectHas(styles, i) && styles[i]) {\n        node.style[i] = styles[i];\n      }\n    }\n\n    return node;\n  },\n\n  /**\n   * Apply styles to a node\n   *\n   * @param {HTMLElement} node that should have styles applied\n   * @param {Object} styles key/value pairs for styles and values\n   * @return {Element} node\n   */\n  walkDOM = function(node, func) {\n\n    node = getElement(node);\n    if (! node) {\n      return false;\n    }\n\n    func(node);\n    node = node.firstChild;\n    while (node) {\n      walkDOM(node,func);\n      node = node.nextSibling;\n    }\n\n    return node;\n  },\n\n\n  /**\n   * Apply attributes to a node\n   *\n   * @param {HTMLElement} node that should have styles applied\n   * @param {Object} styles key/value pairs for styles and values\n   * @return {Element} node\n   */\n  setAttributes = function(node, attrs) {\n\n    node = getElement(node);\n    if (! node) {\n      return false;\n    }\n\n    for (const i in attrs) {\n      if (objectHas(attrs, i) && attrs[i]) {\n        if (attrs[i]) {\n          node.setAttribute([i], attrs[i]);\n        } else {\n          node.removeAttribute([i], attrs[i]);\n        }\n      }\n    }\n\n    return node;\n  },\n\n\n  /**\n   * Build a query string from an object\n   *\n   * @param {Object} obj the object to be passed via URL\n   * @return {String} str query string corresponding to the object\n   */\n  queryString = function(obj) {\n\n    if (Object.keys(obj).length === 0) {\n      return '';\n    }\n\n    return Object.keys(obj).reduce((a,k) => {\n      a.push(k + '=' + encodeURIComponent(obj[k]));\n      return a;\n    },[]).join('&');\n  },\n\n\n  /**\n   * Return an array of all keys in an object (polyfill for Object.keys)\n   *\n   * @param {Object} obj object whose keys should be retrieved\n   * @return {Array} key list\n   */\n  objectKeys = function(obj) {\n\n    if (typeof Object !== \"undefined\" && typeof(Object.keys) !== \"undefined\") {\n      return Object.keys(obj);\n    }\n\n    const a = [];\n    for (const i in obj) {\n      if (objectHas(obj, i)) {\n        a.push(i);\n      }\n    }\n\n    return a;\n  },\n\n  /**\n   * Retrieve (potentially nested) value from object\n   *\n   * @param {Object} object - target object to be inspected\n   * @param {String} path - nested paths\n   * @param {Mixed} fallback - value to return if path not found (default to `null`)\n   * @return {Mixed} - value found at path, or `null` if no such path exists\n   */\n  objectGet = function(object, path, fallback) {\n\n    const bits = path.split('.');\n    let target = object;\n\n    for (let i = 0; i < bits.length; i++) {\n      if (! objectHas(target, bits[i])) {\n        return fallback ? fallback : null;\n      }\n      target = target[bits[i]];\n    }\n\n    return target;\n  },\n\n  objectHas = function(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n  },\n\n\n  /**\n   * Generate an object containing keys/values corresponding to form elements\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/FormData/Using_FormData_Objects\n   * @param {Element} form element\n   * @return {Object} the key/value pairs for the form\n   */\n  objectFromForm = function(form) {\n\n    form = getElement(form);\n    if (! form) {\n      return {};\n    }\n\n\n    const\n    inputs = form.querySelectorAll('select,input,textarea'),\n    params = {};\n// \n    for (const i in inputs) {\n      if (! objectHas(inputs, i)) {\n        continue;\n      }\n      const\n        name = inputs[i].getAttribute('name'),\n        type = inputs[i].type ? inputs[i].type : 'text';\n\n      if (inputs[i].hasAttribute('disabled') || !name) {\n        continue;\n      }\n\n      if (type === 'radio' || type === 'checkbox') {\n        if (inputs[i].checked) {\n          params[name] = inputs[i].value;\n        }\n      } else if ((type === 'select' || type === 'select-multiple') && inputs[i].hasAttribute('multiple')) {\n\n        let arr = [];\n        const opts = inputs[i].querySelectorAll('option:checked');\n        opts.forEach((o) => {\n          arr.push(o.value);\n        });\n        params[name] = arr;\n\n      } else {\n        params[name] = inputs[i].value;\n      }\n    }\n\n    return params;\n  },\n\n  /**\n   * Add event listener to >= 1 node\n   *\n   * @param {String} selector to match nodes\n   * @param {String} eventName the event which should be listened for\n   * @param {Function} func the method to invoke when eventName occurs\n   */\n  addListener = function(selector, eventName, func) {\n    const nodes = getElements(selector);\n    let i = 0;\n\n    for (i in nodes) {\n      if (objectHas(nodes, i)) {\n        nodes[i].addEventListener(eventName, func);\n      }\n    }\n  },\n\n  /**\n   * Get a node's ancestor\n   *\n   * @param {Element} node starting point of search\n   * @param {String} ancestor the selector for the ancestor we're looking for\n   * @param {Bool} includeSelf optionally include starting point in search\n   * @return {Element} or `null` if no such ancestor exists\n   */\n  ancestor = function(node, ancestor, includeSelf) {\n\n    node = getElement(node);\n    if (! node) {\n      return null;\n    }\n\n    if (isAnElement(ancestor)) {\n      let parent = node;\n\n      if (! node.parentNode) {\n        return null;\n      }\n\n      while ( (parent = parent.parentNode) !== null) {\n        if (parent === ancestor) {\n          return parent;\n        }\n      }\n      return null;\n    }\n\n    if (includeSelf && selectorMatches(node, ancestor)) {\n      return node;\n    }\n\n    let parent = node;\n\n    if (! parent.parentNode) {\n      return null;\n    }\n\n    while ((parent = parent.parentNode) !== null) {\n\n      if (selectorMatches(parent, ancestor)) {\n        return parent;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Remove a DOM node from the document\n   *\n   * @param {Element} node the node to be removed\n   * @return {Bool} `true` if removed'; `false` if the node doesn't exist\n   */\n  removeNode = function(node) {\n\n    node = getElement(node);\n    if (! node) {\n      return false;\n    }\n\n    node.parentNode.removeChild(node);\n\n    return true;\n  },\n\n  validateForm = function(form) {\n    form = getElement(form);\n    if (! form) {\n      return false;\n    }\n\n    const inputs = form.querySelectorAll('*[required]');\n    let input, success, value;\n    for (const i in inputs) {\n      if (! objectHas(inputs, i)) {\n        continue;\n      }\n\n      success = true;\n      input = inputs[i];\n      value = input.value;\n\n      switch (input.nodeName.toLowerCase()) {\n\n        case 'textarea':\n          success = input.value.trim() != '';\n          break;\n\n        case 'select':\n          const r = arr(input.selectedOptions);\n          if (r.length == 0) { return input; }\n          if (r[0].value == '') {\n            success = false;\n          }\n          break;\n\n        default: // input\n          switch (input.type) {\n            case 'email':\n              success = isEmail(input.value);\n              break;\n            default: // text\n              success = input.value.trim() != '';\n          }\n      }\n\n      if (! success) {\n        return input;\n      }\n\n    }\n\n    return true;\n\n  },\n\n  /**\n   * Make an XHR request\n   *\n   * {\n   *   form: {selector} - form element to serialize and submit via xhr\n   *   url: '{string}',\n   *   method: '{GET|POST}',\n   *   headers: [],\n   *   params: {}\n   * }\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\n   * @param {Object} config url, method, params, form\n   * @param {Function} handler invoked on completion\n   * @return {XMLHttpRequest} object making the request\n   */\n  xhrRequest = function(config, handler) {\n\n    if (typeof XMLHttpRequest === 'undefined') {\n      return null;\n    }\n\n    const\n    defaults = {\n      form: null,\n      url: '/',\n      headers: {},\n      method: 'get',\n      params: {}\n    };\n\n    config = objectMerge(defaults, config);\n\n    if (config.form) {\n      config.form = getElement(config.form);\n      config.url = config.form.getAttribute('action'),\n      config.method = config.form.getAttribute('method') ? config.form.getAttribute('method') : 'get',\n      config.params = objectFromForm(config.form);\n    }\n\n    const xhttp = new XMLHttpRequest();\n    xhttp.onreadystatechange = function() {\n\n      if (this.readyState === 4) {\n        if (handler) {\n          handler(xhttp);\n        }\n      }\n    };\n\n    let\n    url = config.url,\n    params = '';\n\n    if (config.form) {\n      const type = config.form.getAttribute('enctype');\n      if (type) {\n        config.headers['Content-Type'] = type;\n      }\n    }\n\n    if (config.method.toUpperCase() === 'GET') {\n      url = Object.keys(config.params).length > 0 ? (url + '?' + queryString(config.params)) : url;\n    } else { // post\n      params = queryString(config.params);\n      config.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n    }\n\n    config.headers['X-Requested-With'] = 'XMLHttpRequest';\n\n    xhttp.open(config.method, url, true);\n\n    for (const h in config.headers) {\n      if (objectHas(config.headers, h)) {\n        xhttp.setRequestHeader(h, config.headers[h]);\n      }\n    }\n\n    xhttp.send(params);\n\n    return xhttp;\n  },\n\n  /**\n   *\n   *\n   *\n\n  dataFromNode = function(node) {\n\n  },\n   */\n\n  /**\n   * Retrieve the last non-empty element of an array\n   *\n   * @param {Array} list - array to be iterated through\n   * @param {Function} func (optional) function used to evaluate items in the array\n   * @return {Mixed} the last non-empty value in the array (or `null` if no such value exists)\n   */\n  lastValue = function(list, func) {\n\n    list = arr(list);\n\n    let i = list.length - 1;\n    while (i >= 0) {\n      if (func ? func(list[i]) : list[i]) {\n        return list[i];\n      }\n      i--;\n    }\n\n    return null;\n  };\n\n  // for notifications\n  const subs = {\n\n  };\n\n  /**\n\n\n   @param w {Int} -\n   @return {String} -\n   */\n  const breakpointUp = (w) => {\n    const arg = parseInt(w ? w : window.innerWidth, 10);\n\n    for (const i in breakpoints) {\n      if (breakpoints[i].value > arg) {\n        return breakpoints[i];\n      }\n    }\n    return null;\n  };\n\n  /**\n\n   @param w {Int} -\n   @return {String} -\n   */\n  const breakpointDown = (w) => {\n    const\n      arg = parseInt(w ? w : window.innerWidth, 10),\n      reversed = Array.from(breakpoints).reverse();\n\n    for (const i in reversed) {\n      if (arg > reversed[i].value) {\n        return reversed[i];\n      }\n    }\n    return breakpoints[0];\n  };\n\n  /**\n\n   @return {Object} - { names : widths }\n   */\n  const breakpointGet = (name) => {\n\n    let ret = null;\n    breakpoints.forEach((o) => {\n      if (o.name === name) { ret = o; }\n    });\n\n    return ret;\n  };\n\n\n  /**\n\n   @return {Object} - { names : widths }\n   */\n  const breakpointAll = () => {\n    const obj = {};\n    breakpoints.map((o) => {\n      obj[o.name] = o.value;\n    });\n\n    return obj;\n  };\n\n  const notifyPost = function(name, obj) {\n\n    const special = '*';\n\n    if (objectHas(subs, special)) {\n      for (const i in subs[special]) {\n        if (! objectHas(subs[special], i)) {\n          continue;\n        }\n        subs[special][i](obj);\n      }\n    }\n\n    if (! objectHas(subs, name)) {\n      return;\n    }\n\n    for (const i in subs[name]) {\n      if (! objectHas(subs[name], i)) {\n        continue;\n      }\n      subs[name][i](obj);\n    }\n  };\n\n  const notifySubscribe = (name, f) => {\n    if (! objectHas(subs, name)) {\n      subs[name] = [];\n    }\n    subs[name].push(f);\n  };\n\n  module.exports = {\n\n    Base64: Base64,\n\n    Tools: {\n      debug: function(/*options*/) {\n\n        const\n          div = makeElement('div', { id: 'rmr-debug' });\n\n        document.body.appendChild(div);\n        const resizer = () => {\n          const\n            w = parseInt(window.innerWidth, 10),\n            down = breakpointDown(w),\n            up = breakpointUp(w);\n\n          div.innerHTML = '<span data-popover=\"' + down.value + 'px\" title=\"' + down.value + 'px\">' + down.name + '</span>' + (up ? ':<span data-popover=\"' + up.value + 'px\" title=\"' + up.value + 'px\">' + up.name + '</span>' : '') + ', ' + w + 'px × ' + window.innerHeight + 'px';\n        };\n        window.addEventListener('resize', resizer);\n        resizer();\n      },\n      externalLinks: function(obj) {\n        const parent = (obj && obj.hasOwnProperty('root') ? getElement(obj.root) : document.body);\n        if (! parent) {\n          console.error('Node doesn\\'t exist RMR.Tools.externalLinks', parent);\n          return;\n        }\n\n        if (!obj.hasOwnProperty('exclude')) {\n          obj.exclude = [];\n        }\n\n        const\n          links = parent.querySelectorAll('a'),\n          location = document.location;\n\n        for (let i = 0; i < links.length; i++) {\n          const a = links[i];\n          if (a.protocol === 'file:' || a.protocol === 'tel:' || a.protocol === 'mailto:' || a.hasAttribute('data-rmr-download') || a.hasAttribute('name')) {\n            continue;\n          }\n          if (a.host !== location.host && obj.exclude.indexOf(a.host) < 0) {\n            a.classList.add('rmr-external');\n            a.setAttribute('target', '_blank');\n          }\n        }\n      },\n      loader: function(options) {\n\n        const\n          imgs = options && objectHas(options, 'selector') ? getElements(options.selector) : getElements('img[data-rmr-src],img[data-rmr-srcset]'),\n          loader = (e) => {\n            const target = e.target || e.currentTarget;\n            target.classList.add('rmr-loaded');\n            notifyPost('rmr-load', target);\n          };\n\n        imgs.map((img) => {\n          const\n            src = img.getAttribute('data-rmr-src'),\n            srcset = img.getAttribute('data-rmr-srcset');\n          if (! src && ! srcset) {\n            console.error('No `data-rmr-src` or `data-rmr-srcset` attributes for image loader', img);\n            return;\n          }\n\n          img.addEventListener('load', loader, false);\n          if (srcset) { img.srcset = srcset; }\n          else { img.src = src; }\n        });\n      }\n    },\n\n    // document.body.addEventListener('keyup', function(e){ console.log(e.keyCode); });\n    Keyboard: {\n      next: 39,\n      previous: 37,\n      up: 38,\n      down: 40,\n      escape: 27,\n      enter: 13,\n      space: 32,\n      digits: [ 49, 50, 51, 52, 53, 54, 55, 56, 57, 48  ], // treat 0 zero as the last ordinal\n\n      /**\n       * Determine if a keyboardEvent has a modifier key associated\n       *\n       * @param {KeyboardEvent} e the event\n       * @return {Bool} `true` if event has a modifier key attached (control, shift, command, alt, etc.); `false` if not\n       */\n      hasModifier: function(e) {\n        return e.metaKey || e.altKey || e.ctrlKey || e.shiftKey;\n      },\n\n      /**\n       * Return the ordinal (0-9) of a keypress; -1 if N/A, key \"0\" return ordinal 9\n       *\n       * @param {Integer|Event} keyCode either the key code or the window event for a `keypress`\n       * @return {Integer} ordinal for the key, or -1 if N/A\n       */\n      ordinal: function(keyCode) {\n\n        keyCode = parseInt(typeof keyCode !== 'number' ? keyCode.keyCode : keyCode, 10);\n\n        if (keyCode === 48) {\n          return 9;\n        } else if (keyCode >= 49 && keyCode <= 57) {\n          return keyCode - 49;\n        }\n\n        return -1;\n      }\n    },\n\n    Date: {\n\n      /**\n       * Convert a Date instance to RFC 3339 format, ex: `2019-01-17T17:55:48Z`\n       *\n       * @param {Date} date to be formatted, optional\n       * @return {String} Date in RFC 3339 format\n       * @see https://tools.ietf.org/html/rfc3339\n       */\n      toRFC3339: function(date) {\n\n        if (! date) { date = new Date(); }\n\n        const pad = function(n) {\n          return n < 10 ? '0' + n : n;\n        };\n\n         return date.getUTCFullYear() + '-'\n              + pad(date.getUTCMonth()+1) + '-'\n              + pad(date.getUTCDate()) + 'T'\n              + pad(date.getUTCHours()) + ':'\n              + pad(date.getUTCMinutes()) + ':'\n              + pad(date.getUTCSeconds()) + 'Z';\n      },\n\n      fromRFC3339: function(dString) {\n\n        if (! dString) {\n          return null;\n        }\n\n        return new Date(dString);\n/*\n        const ret = new Date();\n\n        let utcOffset, offsetSplitChar;\n        let offsetMultiplier = 1;\n        const dateTime = dString.split(\"T\");\n        const date = dateTime[0].split(\"-\");\n        const time = dateTime[1].split(\":\");\n        const offsetField = time[time.length - 1];\n        let offsetString;\n\n        const offsetFieldIdentifier = offsetField.charAt(offsetField.length - 1);\n        if (offsetFieldIdentifier === \"Z\") {\n            utcOffset = 0;\n            time[time.length - 1] = offsetField.substr(0, offsetField.length - 2);\n        } else {\n            if (offsetField[offsetField.length - 1].indexOf(\"+\") !== -1) {\n                offsetSplitChar = \"+\";\n                offsetMultiplier = 1;\n            } else {\n                offsetSplitChar = \"-\";\n                offsetMultiplier = -1;\n            }\n            offsetString = offsetField.split(offsetSplitChar);\n            time[time.length - 1] === offsetString[0];\n            offsetString = offsetString[1].split(\":\");\n            utcOffset = (offsetString[0] * 60) + offsetString[1];\n            utcOffset = utcOffset * 60 * 1000;\n        }\n\n        ret.setTime(Date.UTC(date[0], date[1] - 1, date[2], time[0], time[1], time[2]) + (utcOffset * offsetMultiplier));\n        return ret;\n*/\n      }\n    },\n\n    OS: {\n      isApple: function() {\n        const agent = window.navigator.userAgent;\n        return agent.match('iPhone;') || agent.match('iPad;') || agent.match('iPod;')  || agent.match('Mac OS X');\n      }\n    },\n    Form: {\n      validate: validateForm,\n    },\n    Browser: {\n      isTouch: isTouch,\n      isDark: () => { return window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches; },\n      isSafari: isSafari,\n      isFirefox: isFirefox,\n      scrollTo: scrollTo,\n      opensData: opensData,\n      Breakpoint: {\n\n        /**\n\n         */\n         up: breakpointUp,\n         down: breakpointDown,\n         get: breakpointGet,\n         all: breakpointAll\n      }\n    },\n    String: {\n      isEmail: isEmail,\n      isURL: isURL,\n      guid: guid,\n      localize: localize,\n//      bind: bindString,\n      formatSeconds: (seconds) => {\n\n        seconds = parseInt(seconds);\n        if (seconds < 60) {\n          return seconds + 's';\n        }\n\n        let\n        sec_num = seconds,\n        hours   = Math.floor(sec_num / 3600),\n        minutes = Math.floor((sec_num - (hours * 3600)) / 60);\n        seconds = sec_num - (hours * 3600) - (minutes * 60);\n\n        if (seconds < 10) { seconds = '0' + seconds;}\n\n        if (hours == 0) {\n          return minutes + ':' + seconds;\n        }\n        if (minutes < 10) { minutes = '0' + minutes;}\n\n        return hours + ':' + minutes + ':' + seconds;\n      }\n    },\n    Array: {\n      coerce: arr,\n      last: lastValue,\n      remove: arrayRemove,\n      find: arrayFind,\n      reorder: arrayReorder\n    },\n    Notify: {\n      post: notifyPost,\n      subscribe: notifySubscribe\n    },\n    Object: {\n      keys: objectKeys,\n      merge: objectMerge,\n      value: objectGet,\n      fromForm: objectFromForm,\n      queryString: queryString,\n      has: objectHas\n    },\n    XHR: {\n      request: xhrRequest\n    },\n    Timing: {\n      easeInOut: easeInOutQuad,\n    },\n    Map: {\n      formatLatitude: formatLatitude,\n      formatLongitude: formatLongitude\n    },\n    Node: {\n      isa: isAnElement,\n      ancestor: ancestor,\n      matches: selectorMatches,\n      remove: removeNode,\n      loader: loader,\n      get: getElement,\n      getAll: getElements,\n      prune: pruneElement,\n      listen: addListener,\n      create: makeElement,\n      getRect: getRect,\n      setStyles: setStyles,\n      setAttributes: setAttributes,\n      scrollTo: scrollNodeTo,\n      walk: walkDOM\n//      relativePosition: relativePosition\n\n    }\n  };\n\n  if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n\n    if (!document.body) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      document.body.classList.add('rmr-load');\n    });\n\n    document.addEventListener('DOMContentLoaded', () => {\n      document.body.classList.remove('rmr-nojs');\n      document.body.classList.add('rmr-js');\n\n      if (isTouch()) {\n        document.body.classList.add('rmr-touch');\n\n        const resizer = function() {\n\n          const\n          body = document.body,\n          cls = window.innerWidth > window.innerHeight ? 'rmr-landscape' : 'rmr-portrait';\n\n          body.classList.remove('rmr-landscape');\n          body.classList.remove('rmr-portrait');\n\n          body.classList.add(cls);\n        };\n\n        window.addEventListener('orientationchange', () => {\n          resizer();\n        });\n\n        resizer();\n\n      } else {\n        const\n        body = document.body,\n        hover = 'rmr-hover',\n        out = 'rmr-nohover';\n\n        body.addEventListener('mouseenter', () => {\n          body.classList.add(hover);\n          body.classList.remove(out);\n        });\n\n        body.addEventListener('mouseleave', () => {\n          body.classList.remove(hover);\n          body.classList.add(out);\n        });\n      }\n    });\n  }\n\n\n/*\n  (function() {\n    var elements = ['section', 'article', 'aside', 'header', 'footer', 'nav', 'figure', 'figcaption', 'time', 'mark', 'main'];\n    for (const i in elements) {\n      if (elements.hasOwnProperty(i)) {\n        console.log(elements[i]);\n        document.createElement(elements[i]);\n      }\n    }\n  })();\n*/\n})();\n\n\n//# sourceURL=webpack://rmr-modal/./node_modules/rmr-util/index.js?");

/***/ }),

/***/ "./src/scripts/index.js":
/*!******************************!*\
  !*** ./src/scripts/index.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("(function() {\n  'use strict';\n  window.Modal = (__webpack_require__(/*! ./rmr-modal.js */ \"./src/scripts/rmr-modal.js\").Modal);\n})();\n\n\n//# sourceURL=webpack://rmr-modal/./src/scripts/index.js?");

/***/ }),

/***/ "./src/scripts/rmr-modal-clip.js":
/*!***************************************!*\
  !*** ./src/scripts/rmr-modal-clip.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* */\n\n(() => {\n\n  'use strict';\n\n  const\n  URL = window.URL,\n  RMR = __webpack_require__(/*! rmr-util */ \"./node_modules/rmr-util/index.js\"),\n\n  /**\n   * Parse a YouTube or Vimeo URL and retrieve the video/clip ID \n   *\n   * @param {String} url the URL to be parsed\n   * @return {String} the clip id\n   */\n  getClipID = function(url) {\n\n    // ensure it's a string\n    url = '' + url;\n\n    if (url.substring(0, '5') !== 'http:' && url.substring(0, '8') !== 'https://' && url.substring(0, 2) !== '//') {\n      return url;\n    }\n\n    // unsupported (older versions of internet explorer)\n    if (typeof URL === 'undefined') {\n      return null;\n    }\n\n    const\n    o = new URL(url),\n    params = o.searchParams;\n\n    if (o.hostname.indexOf('youtube.com') !== -1) {\n      if (params.get('v')) {\n        return params.get('v');\n      }\n\n      const paths = o.pathname.split('/');\n      return RMR.Array.last(paths);\n\n    } else if (o.hostname.indexOf('vimeo.com') !== -1) {\n\n      if (o.hostname.indexOf('player.vimeo.com') !== -1) {\n        return RMR.Array.last(o.pathname.split('/'))\n      }\n\n      const id = RMR.Array.last(o.pathname.split('/'));\n      if (parseInt(id, 10)) {\n        return id;\n      }\n\n      return null;\n    }\n\n    return url;\n  };\n\n  module.exports = getClipID;\n\n})();\n\n\n//# sourceURL=webpack://rmr-modal/./src/scripts/rmr-modal-clip.js?");

/***/ }),

/***/ "./src/scripts/rmr-modal.js":
/*!**********************************!*\
  !*** ./src/scripts/rmr-modal.js ***!
  \**********************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* global document,window,Element,module,console */\n\n\n/*\n * modal\n * ©2017 David Miller\n * https://readmeansrun.com\n *\n * modal is licensed under the MIT license:\n * http://www.opensource.org/licenses/mit-license.php\n *\n */\n\n(() => {\n\n  'use strict';\n\n  const\n  // VERSION = '0.0.1',\n\n  RMR = __webpack_require__(/*! rmr-util */ \"./node_modules/rmr-util/index.js\"),\n\n  getClipID = __webpack_require__(/*! ./rmr-modal-clip */ \"./src/scripts/rmr-modal-clip.js\"),\n\n  MOBILE = RMR.Browser.isTouch(),\n\n  PREFIX = 'rmr-modal-',\n  LANG = {\n    'close': 'Close'\n  },\n\n  localize = function(key, lookup) {\n    if (! lookup) {\n      lookup = LANG;\n    }\n\n    if (LANG.hasOwnProperty(key)) {\n      return LANG[key];\n    }\n\n    console.warn('No localization for ' + key);\n    return key;\n  },\n\n  /*\n   *\n   */\n  addCurtains = function(parent) {\n\n    const curtains = RMR.Node.create('div', { class: PREFIX + 'curtains' });\n    curtains.innerHTML = RMR.Node.loader();\n    parent.appendChild(curtains);\n\n    const rect = RMR.Node.getRect(parent),\n    svg = parent.querySelector('svg');\n\n    svg.style.left = (rect.width - 40) / 2  + 'px';\n    svg.style.top = (rect.height - 40) / 2  + 'px';\n  },\n\n  /**\n   * Create a Modal instance\n   *\n   * @param {Object} options - args\n   */\n  Modal = function(options) {\n\n    const defaults = {\n      autoplay: 1,\n      blur: false,\n      z: 1,\n      attrs: {}\n    };\n\n    if (options.hasOwnProperty('aspect') && options.hasOwnProperty('size')) {\n      throw new Error('Invalid arguments: aspect and size provided. Specify one or the other.');\n    }\n\n    this.options = RMR.Object.merge(defaults, options);\n    this.elements = {\n      bg: null,\n      container: null,\n      blur: null\n    };\n  };\n\n  /**\n   * Presents the modal\n   *\n   * @return {Object} - instance for chaining\n   * @chainable\n   */\n  Modal.prototype.show = function() {\n\n    const self = this;\n\n    const\n    dismiss = function() {\n      self.remove();\n    },\n\n    // logic to run before context-specific initialization\n    init = function() {\n      self.elements.bg = RMR.Node.create('div', { class: PREFIX + 'bg' });\n//      self.elements.bg.classList.add(PREFIX + 'bg');\n      self.elements.bg.style.zIndex = parseInt(self.options.z, 10);\n\n      document.body.classList.add(PREFIX + 'open');\n\n      self.elements.container = RMR.Node.create('div', { tabindex: -1, role: 'dialog', 'aria-hidden': true });\n      self.elements.container.classList.add(PREFIX + 'dialog');\n      self.elements.container.style.zIndex = parseInt(self.options.z + 1, 10);\n\n      if (self.options.size) {\n        self.elements.container.style.width = self.options.size.width + 'px';\n        self.elements.container.style.height = self.options.size.height + 'px';\n      }\n\n      if (self.options.blur) {\n        self.elements.blur = RMR.Node.create('div', { class: PREFIX + 'blur' });\n        while (document.body.childNodes.length > 0) {\n          const n = document.body.firstChild;\n          RMR.Node.remove(n);\n          self.elements.blur.appendChild(n);\n        }\n      }\n      document.body.appendChild(self.elements.bg);\n\n      window.setTimeout(function() {\n        self.elements.bg.classList.add(PREFIX + 'focus');\n      }, 0);\n      document.body.insertBefore(self.elements.container, document.body.childNodes[0]);\n \n      if (self.options.blur) {\n        document.body.appendChild(self.elements.blur);\n      }\n\n      self.keyListener = document.addEventListener('keydown', (e) => {\n\n//        console.log(e.keyCode);\n\n        if (e.keyCode === 27) { // escape key\n          self.remove();\n        } else if (e.keyCode === 32 && self.options && self.options.video) { // spacebar\n\n          e.preventDefault();\n\n          const video = self.elements.container.querySelector('video');\n          if (video) {\n            if (video.paused) {\n              video.play();\n            } else {\n              video.pause();\n            }\n          }\n        }\n      });\n    },\n\n    // logic to run after context-specific initialization\n    post = function() {\n\n      if (! self.options) {\n        return;\n      }\n\n      if (self.options.hasOwnProperty('class')) {\n        self.elements.container.classList.add(self.options.class);\n      }\n\n      const curtains = self.elements.container.querySelector('.' + PREFIX + 'curtains');\n      window.setTimeout(function() {\n        if (curtains && curtains.parentNode) {\n          curtains.parentNode.removeChild(curtains);\n        }\n      }, 200);\n\n\n      const but = RMR.Node.create('button', { class: PREFIX + 'dismiss', title: localize('close')} );\n      but.innerHTML = localize('close');\n      self.elements.container.appendChild(but);\n      but.addEventListener('click', dismiss);\n      but.focus();\n\n      const resizer = function() {\n\n        if (! self || ! self.options) {\n          return;\n        }\n\n        let resize = false;\n\n        const\n        aspect = self.options.hasOwnProperty('aspect') ? self.options.aspect : self.options.hasOwnProperty('size') ? self.options.size.width / self.options.size.height : 0,\n        buffer = MOBILE ? 0 : 0.20, // portion of window that should be padding around modal\n        modalSize = { width: 0, height: 0},\n        windowSize = { width: window.innerWidth, height: window.innerHeight },\n        verticalLimiter = (window.innerWidth / window.innerHeight) > aspect ? true : false;\n\n        // set size via aspect ratio that fits in browser window\n        if (self.options.hasOwnProperty('aspect')) {\n          resize = true;\n          if (verticalLimiter) {\n            modalSize.height = (windowSize.height - windowSize.height * buffer);\n            modalSize.width = modalSize.height * aspect;\n          } else {\n            modalSize.width = (windowSize.width - windowSize.width * buffer);\n            modalSize.height = modalSize.width / aspect;\n          }\n\n        // set size via options parameters\n        } else if (self.options.hasOwnProperty('size')) {\n\n          resize = true;\n          modalSize.width = self.options.size.width;\n          modalSize.height = self.options.size.height;\n\n        } else {\n          const section = self.elements.container.querySelector('section.' + PREFIX + 'section');\n          if (section) {\n            section.style.maxHeight = parseInt(window.getComputedStyle(self.elements.container).height, 10)  + 'px';\n          }\n\n        }\n        // undefined sizing behaviour\n\n        if (resize) {\n          self.elements.container.style.right = '';\n          self.elements.container.style.width = modalSize.width + 'px';\n          self.elements.container.style.height = modalSize.height + 'px';\n          self.elements.container.style.left = (windowSize.width - modalSize.width) / 2 + 'px';\n          self.elements.container.style.top = (windowSize.height - modalSize.height) / 2 + 'px';\n\n          // position svg loader\n          const svg = self.elements.container.querySelector('svg.rmr-loader');\n          if (svg) {\n            svg.style.left = (modalSize.width - 40) / 2  + 'px';\n            svg.style.top = (modalSize.height - 40) / 2  + 'px';\n          }\n        }\n      };\n\n      resizer();\n      self.resizeListener = window.addEventListener('resize', resizer);\n\n      document.body.classList.add(PREFIX + 'open');\n      if (self.options.hasOwnProperty('class')) {\n        self.elements.container.classList.add(self.options.class);\n      }\n\n      self.elements.bg.addEventListener('click', dismiss);\n      window.setTimeout(() => {\n        if (! self) {\n          return;\n        }\n        if (self.elements.container) {\n          self.elements.container.classList.add(PREFIX + 'focus');\n          if (MOBILE) {\n            self.elements.container.classList.add(PREFIX + 'mobile');\n          }\n        }\n\n        if (self.options && self.options.hasOwnProperty('on') && self.options.on.hasOwnProperty('show')) {\n          self.options.on.show(self.elements.container, self.options);\n        }\n      }, 100);\n\n      self.elements.container.appendChild(document.createComment('Created by modal - https://github.com/davidfmiller/modal '));\n    };\n\n    if (this.options.iframe) {\n\n      init();\n\n      const\n      iframe = '<iframe src=\"' + this.options.iframe  + '\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>';\n\n      self.elements.container.classList.add(PREFIX + 'iframe');\n      self.elements.container.innerHTML = iframe;\n\n      post();\n\n    } else if (this.options.url) {\n\n      init();\n\n      self.elements.container.classList.add(PREFIX + 'loading');\n\n      addCurtains(self.elements.container);\n\n      self.elements.container.querySelector('svg').addEventListener('click', () => {\n        self.remove();\n      });\n\n      const xhttp = new XMLHttpRequest();\n      xhttp.onreadystatechange = function() {\n\n        if (this.readyState === 4) {\n          if (this.status === 200) {\n            if (self.elements.container) {\n              self.elements.container.classList.add(PREFIX + 'node');\n              self.elements.container.classList.remove(PREFIX + 'loading');\n              self.elements.container.innerHTML = '<section class=\"' + PREFIX + 'section\">' + this.responseText + '</section>';\n              post();\n            }\n          } else {\n// TODO\n          }\n        }\n      };\n\n      window.setTimeout(function () {\n        if (self.options) {\n          xhttp.open(self.options.hasOwnProperty('method') ? self.options.method : 'get', self.options.url, true);\n          xhttp.send();\n        }\n      }, 200);\n\n    } else if (this.options.image) {\n\n      init();\n\n      self.elements.container.classList.add(PREFIX + 'loading');\n\n      const image = RMR.Node.create('img', this.options.attrs);\n\n      addCurtains(self.elements.container);\n\n      image.onload = () => {\n        self.elements.container.classList.remove(PREFIX + 'loading');\n        post();\n      };\n\n      window.setTimeout(function() {\n        image.srcset = RMR.Node.isa(self.options.image) ? (self.options.image.srcset ? self.options.image.srcset : self.options.image.src) : self.options.image;\n      }, 200);\n\n      self.elements.container.appendChild(image);\n\n      if (this.options.title) {\n        image.setAttribute('title', this.options.title);\n      }\n\n      if (this.options.link) {\n        image.setAttribute('data-rmr-link', this.options.link.url);\n        image.addEventListener('click', e => {\n          e.preventDefault();\n          window.open(this.options.link);\n        });\n      }\n\n    } else if (this.options.video) {\n\n      init();\n\n      self.elements.container.classList.add(PREFIX + 'loading');\n\n      const video = RMR.Node.create('video', this.options.attrs);\n      video.setAttribute('tabindex', -1);\n      for (const i in this.options.video) {\n        if (this.options.video.hasOwnProperty(i)) {\n          const source = RMR.Node.create('source', { type: i, src: this.options.video[i] });\n          video.appendChild(source);\n        }\n      }\n\n      addCurtains(self.elements.container);\n\n      video.addEventListener('loadeddata', () => {\n        window.setTimeout(function() {\n          self.elements.container.classList.remove(PREFIX + 'loading');\n        }, 400);\n      });\n\n      self.elements.container.appendChild(video);\n      post();\n\n    } else if (this.options.node) {\n\n      init();\n\n      const node = RMR.Node.get(this.options.node);\n\n      if (! node) {\n        throw new Error('Invalid node for modal :' + node);\n        return;\n      }\n\n      self.elements.container.classList.add(PREFIX + 'node');\n\n      self.elements.container.innerHTML = '<section class=\"' + PREFIX + 'section\">' + node.innerHTML + '</section>';\n      post();\n\n    } else if (this.options.html) {\n\n      init();\n\n      const container = self.elements.container;\n\n      container.classList.add(PREFIX + 'node');\n      container.innerHTML = '<section class=\"' + PREFIX + 'section\">' + this.options.html + '</section>';\n\n      const section = container.querySelector('section');\n      if (this.options.title) {\n        section.setAttribute('title', this.options.title);\n      }\n\n      if (this.options.link) {\n        \n        section.setAttribute('data-rmr-link', this.options.link);\n        section.addEventListener('click', e => {\n          e.preventDefault();\n          window.open(this.options.link);\n        });\n      }\n\n      post();\n\n    } else if (this.options.youtube || this.options.vimeo) {\n\n      const clip = getClipID(this.options.youtube ? this.options.youtube : this.options.vimeo);\n\n      init();\n\n      const\n      player = this.options.hasOwnProperty('youtube') ? 'https://www.youtube.com/embed/' : 'https://player.vimeo.com/video/',\n      iframe = '<iframe src=\"' + player + (clip ? clip : '')  + (this.options.autoplay ? '?autoplay=1' : '') + '\" frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>';\n\n      self.elements.container.classList.add(PREFIX + 'video');\n      self.elements.container.innerHTML = iframe;\n      post();\n\n    } else {\n      throw new Error('Invalid modal parameters: ' + JSON.stringify(this.options));\n      return;\n    }\n\n    return this;\n  };\n\n  /**\n   * Remove the modal\n   *\n   * @return {Object} - instance for chaining\n   * @chainable\n   */\n  Modal.prototype.remove = function() {\n    const self = this;\n\n    document.body.classList.remove(PREFIX + 'open');\n\n    if (self.elements.blur && self.elements.blur.childNodes) {\n      while (self.elements.blur.childNodes.length > 0) {\n        const n = self.elements.blur.firstChild;\n        RMR.Node.remove(n);\n        document.body.appendChild(n);\n      }\n      document.body.removeChild(self.elements.blur);\n    }\n\n\n    if (self.elements.container) {\n      self.elements.container.classList.remove(PREFIX + 'focus');\n    }\n    if (self.elements.bg) {\n      self.elements.bg.classList.add(PREFIX + 'dismiss');\n    }\n\n    document.body.classList.remove(PREFIX + 'open');\n\n    // fire `remove` event, if provided\n    if (self.options && self.options.hasOwnProperty('on') && self.options.on.hasOwnProperty('remove')) {\n      self.options.on.remove(self.elements.container, self.options);\n    }\n\n    // remove event listeners\n    window.removeEventListener('resize', self.resizeListener);\n    document.removeEventListener('keydown', self.keyListener);\n\n    window.setTimeout(\n      function timeout() {\n        if (! self) {\n          return;\n        }\n\n        if (self.elements.bg) {\n          document.body.removeChild(self.elements.bg);\n        }\n        if (self.elements.container) {\n          document.body.removeChild(self.elements.container);\n        }\n        self.resizeListener = self.keyListener = self.options = null;\n        self.elements = { container: null, bg: null };\n      }, 200\n    );\n\n    return this;\n  };\n\n  module.exports = {\n    Modal: Modal,\n    clip: getClipID\n  };\n\n})();\n\n\n//# sourceURL=webpack://rmr-modal/./src/scripts/rmr-modal.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/scripts/index.js");
/******/ 	
/******/ })()
;